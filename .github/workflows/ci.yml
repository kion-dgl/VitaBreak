name: CI - Build All Platforms

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install SDL2
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-ttf-dev cmake build-essential

    - name: Build Linux
      run: |
        mkdir build && cd build
        cmake ..
        make -j$(nproc)

    - name: Test Linux Binary
      run: |
        file build/BreakOut
        ldd build/BreakOut

    - name: Upload Linux Binary
      uses: actions/upload-artifact@v4
      with:
        name: BreakOut-Linux
        path: build/BreakOut

  build-windows:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install MinGW and SDL2
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 cmake wget unzip

    - name: Download SDL2 for MinGW
      run: |
        wget https://github.com/libsdl-org/SDL/releases/download/release-2.30.10/SDL2-devel-2.30.10-mingw.tar.gz
        tar -xzf SDL2-devel-2.30.10-mingw.tar.gz
        export SDL2_DIR=$(pwd)/SDL2-2.30.10/x86_64-w64-mingw32
        echo "SDL2_DIR=$SDL2_DIR" >> $GITHUB_ENV

    - name: Download SDL2_ttf for MinGW
      run: |
        wget https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.22.0/SDL2_ttf-devel-2.22.0-mingw.tar.gz
        tar -xzf SDL2_ttf-devel-2.22.0-mingw.tar.gz
        export SDL2_TTF_DIR=$(pwd)/SDL2_ttf-2.22.0/x86_64-w64-mingw32
        echo "SDL2_TTF_DIR=$SDL2_TTF_DIR" >> $GITHUB_ENV

    - name: Build Windows
      run: |
        mkdir build-windows && cd build-windows
        cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/mingw-w64-x86_64.cmake \
              -DSDL2_INCLUDE_DIR="$SDL2_DIR/include/SDL2;$SDL2_TTF_DIR/include/SDL2" \
              -DSDL2_LIBRARY="$SDL2_DIR/lib/libSDL2main.a;$SDL2_DIR/lib/libSDL2.dll.a" \
              -DSDL2_TTF_INCLUDE_DIR=$SDL2_TTF_DIR/include/SDL2 \
              -DSDL2_TTF_LIBRARY=$SDL2_TTF_DIR/lib/libSDL2_ttf.dll.a \
              ..
        make -j$(nproc)

    - name: Package Windows Build
      run: |
        mkdir -p BreakOut-Windows
        cp build-windows/BreakOut.exe BreakOut-Windows/
        cp $SDL2_DIR/bin/SDL2.dll BreakOut-Windows/
        cp $SDL2_TTF_DIR/bin/SDL2_ttf.dll BreakOut-Windows/

    - name: Upload Windows Build
      uses: actions/upload-artifact@v4
      with:
        name: BreakOut-Windows
        path: BreakOut-Windows/

  build-wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: 'latest'

    - name: Build WebAssembly
      run: |
        mkdir -p build-wasm
        cd build-wasm
        emcmake cmake ..
        emmake make -j$(nproc)

    - name: Verify WASM Output
      run: |
        ls -lh build-wasm/BreakOut.*
        file build-wasm/BreakOut.wasm

    - name: Upload WASM Build
      uses: actions/upload-artifact@v4
      with:
        name: BreakOut-WASM
        path: |
          build-wasm/BreakOut.html
          build-wasm/BreakOut.js
          build-wasm/BreakOut.wasm

  build-portmaster:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64,arm

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build PortMaster ARM64
      run: |
        docker run --rm \
          --platform=linux/arm64 \
          -v "$(pwd):/src" \
          -w /src \
          monkeyx/retro_builder:arm64 \
          bash -c "mkdir -p build-portmaster-arm64 && \
                   cd build-portmaster-arm64 && \
                   cmake -DPORTMASTER=ON .. && \
                   make -j\$(nproc)"

    # ARM32 build skipped in CI due to old CMake in Docker image
    # Can be built locally with ./build-portmaster.sh
    # - name: Build PortMaster ARM32
    #   run: |
    #     docker run --rm \
    #       --platform=linux/arm/v7 \
    #       -v "$(pwd):/src" \
    #       -w /src \
    #       monkeyx/retro_builder:arm32 \
    #       bash -c "mkdir -p build-portmaster-arm32 && \
    #                cd build-portmaster-arm32 && \
    #                cmake -DPORTMASTER=ON .. && \
    #                make -j\$(nproc)"

    - name: Verify ARM64 Binary
      run: |
        file build-portmaster-arm64/BreakOut
        ls -lh build-portmaster-arm64/BreakOut

    - name: Upload PortMaster ARM64 Binary
      uses: actions/upload-artifact@v4
      with:
        name: BreakOut-PortMaster-ARM64
        path: build-portmaster-arm64/BreakOut

  build-vita:
    runs-on: ubuntu-latest
    container:
      image: gnuton/vitasdk-docker:latest
    steps:
    - uses: actions/checkout@v4

    - name: Build PS Vita VPK
      run: |
        export VITASDK=/usr/local/vitasdk
        export PATH=$VITASDK/bin:$PATH
        mkdir -p build-vita
        cd build-vita
        cmake -DCMAKE_TOOLCHAIN_FILE=$VITASDK/share/vita.toolchain.cmake ..
        make -j$(nproc)

    - name: Verify VPK
      run: |
        ls -lh build-vita/*.vpk
        file build-vita/BreakOut.vpk

    - name: Upload PS Vita VPK
      uses: actions/upload-artifact@v4
      with:
        name: BreakOut-PSVita
        path: build-vita/BreakOut.vpk
